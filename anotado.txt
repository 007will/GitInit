ls -> lista arquivos
cd -> move entre diretórios
pwd -> mostra diretório de trabalho

guit init . -> Cria pasta versionada do guit
rm -rf .git/ -> Caso precise excluir a pasta
ls -a -> lista pastas e arquivos oucutos
git status - > mostra status dos comites
git add nome_arquivo.extensao -> Adiciona arquivo ao commit
git commit -m "nome arquivo" -> Adiciona o versionamento dele
git config --global user.email "mail"
git config --global user.name "007Will"
git commit -m "comandos bash"

$ git commit -m "comandos bash"
[main (root-commit) af3213c] comandos bash
 1 file changed, 3 insertions(+)
 create mode 100644 comandos_bash.txt

$ ls -a
./  ../  .git/  comandos_bash.txt

cat -> exibe conteúdo do arquivo
rm -> remove arquivo ou diretório

nano nome_arquivo.extensao -> cria um novo arquivo e abre no editor nano GNU dentro do propt (Para salvar arquivo - Control + O e sair Control + X)

Exemplo: nano comandos_git.txt

git init . > cria um repo git na pasta atual
git status > mostra o status do trabalho (de cada arquivo)
git add nome_arquivo > adiciona arquivo para ser commitado
git commit m "msg" > faz commit do que estava para ser comitado

git log -> mostra todas as alterações feitas e informações gerais
histórico de todos os commits

rm -rf -> remove de forma recursiva e forçada todos os diretórios

git add * -> adicionar tudo
git add . -> adicionar tudo da pasta atual .git
git add comandos_*  -> adicionar tudo começados com o nome
git add * .txt -> adicionar todos os arquivos txt


extras

 git init .
 -> Cria novo repositório git
git status
 -> Mostra o status da branch atual
git add <nome arquivo>
 -> Manda arquivo para stage
git commit -m "minha mensagem"
 -> Consolida o checkpoint "commit"
git log
 -> Exibe histórico de commits
git reset
 -> Retorna para unstage
git reset idCommit                           
 -> Retorna para pos-commit

git reset Nome.extensao -> Retorna ao estado anterior do arquivo
git reset Sem nome - > Reseta dos os arquivos
git checkout -b Nome da branch -> Cria uma branch secundária
git checkout main -> Retorna a branch primaria
git branch -> Mostra a branch em que está
git checkout "NomeSecundaria" ->entra na Branch informada, "secundária"

$ git --help ---------------------------------------------------------------------
usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch]
           [--no-optional-locks] [--no-advice] [--bare] [--git-dir=<path>]
           [--work-tree=<path>] [--namespace=<name>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   restore    Restore working tree files
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   diff       Show changes between commits, commit and working tree, etc
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   backfill   Download missing objects in a partial clone
   branch     List, create, or delete branches
   commit     Record changes to the repository
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   reset      Reset current HEAD to the specified state
   switch     Switch branches
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

